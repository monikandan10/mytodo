from django.contrib.auth import get_user_model
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import AllowAny
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework import status
from .serializers import UserLoginSerializer

User = get_user_model()

class LoginView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = UserLoginSerializer(data=request.data)
        if serializer.is_valid(raise_exception=True):
            user = serializer.validated_data
            refresh = RefreshToken.for_user(user)
            access_token = refresh.access_token

            # Prepare response
            response = Response({
                'access': str(access_token),
                'refresh': str(refresh),
                'username': user.username,  # Serialize the username explicitly
                'access_expires': access_token.lifetime.total_seconds()
            })
            
            # Set the refresh token in a secure HTTP-only cookie
            response.set_cookie(
                key='refresh_token',
                value=str(refresh),
                httponly=True,
                secure=True,  # Use False for local development if HTTPS is not enabled
                samesite='Strict'
            )

            return response

        return Response(
            {'error': 'Invalid credentials, please try again.'},
            status=status.HTTP_400_BAD_REQUEST
        )
